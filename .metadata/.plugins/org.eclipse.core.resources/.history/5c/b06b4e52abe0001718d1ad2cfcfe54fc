package com.zgcxueyuan.day3;

import java.util.*;

/**
 * 模拟斗地主洗牌和发牌，同时对牌进行排序的代码实现
 * 
 * @author Administrator
 *
 */
public class Figure {

	private static String pokerShape[] = { "方块", "梅花", "红心", "黑桃" };
	private static String pokercoder[] = { "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A", "2" };

	public static void main(String[] args) {
		ArrayList<Poker> al = new ArrayList<>();
		al.add(new Poker(14, "大王"));
		al.add(new Poker(15, "小王"));
		for (int i = 0; i < pokerShape.length; i++) {
			int count = 3;// 每次 pokercoder 分配完一次pokerShape就把count再次归零
			for (int j = 0; j < pokercoder.length; j++) {
				al.add(new Poker(count++, pokerShape[i] + pokercoder[j]));
			}
		}
		Collections.shuffle(al);//洗牌
		TreeSet<Poker> cards = new TreeSet<>(new MyCompare());// cards 底牌
		TreeSet<Poker> playerOne = new TreeSet<>(new MyCompare());// playerOne 玩家1
		TreeSet<Poker> playerTwo = new TreeSet<>(new MyCompare());// playerTwo 玩家2
		TreeSet<Poker> playerThree = new TreeSet<>(new MyCompare());// playerThree 玩家3

		for (int i = 0; i < 54; i++) {
			if (i < 3) {// cards 底牌
				cards.add(al.get(i));
				
			} else if (i>=3&&i<20) {// playerOne 玩家1
				playerOne.add(al.get(i));

			} else if (i>=20&&i<37) {// playerTwo 玩家2
				playerTwo.add(al.get(i));

			} else if(i>=37&&i<54){// playerThree 玩家3
				playerThree.add(al.get(i));
			}
		}
		// int landlord = randomNumber();
		// if (landlord==0) {
		// for (Iterator<Poker> card = cards.iterator(); cards.isEmpty();) {
		// playerOne.add(card.next());
		// }
		// System.out.println("1是地主");
		// }else if (landlord==1) {
		// for (Iterator<Poker> card = cards.iterator(); cards.isEmpty();) {
		// playerTwo.add(card.next());
		// }
		// System.out.println("2是地主");
		// }else {
		// for (Iterator<Poker> card = cards.iterator(); cards.isEmpty();) {
		// playerThree.add(card.next());
		// }
		// System.out.println("3是地主");
		// }
		System.out.print("cards:");
		getPoker(cards);
		System.out.print("cards:");
		getPoker(playerOne);
		System.out.print("cards:");
		getPoker(playerTwo);
		System.out.print("cards:");
		getPoker(playerThree);
	}

	private static void getPoker(TreeSet<Poker> pokes) {
		for (Iterator<Poker> iterator = pokes.iterator(); iterator.hasNext();) {
			Poker poke = iterator.next();
			System.out.print(poke.getName() + " ");
		}
		System.out.print("	"	);
		System.out.println("共有"+pokes.size()+"张牌");
	}

	/**
	 * 随机数用来产出地主的
	 * 
	 * @return 0――one 1――two 2――Three
	 */
	private static int randomNumber() {
		return (int) (Math.random() * 3);
	}

}
