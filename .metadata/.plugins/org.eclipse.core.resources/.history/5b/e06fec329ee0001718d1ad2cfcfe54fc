package com.zgcxueyuan.day3;

import java.util.*;
/**
 * 模拟斗地主洗牌和发牌，同时对牌进行排序的代码实现
 * @author Administrator
 *
 */
public class Figure {
	private static int count = 0;
	private static String pokerShape [] = {"方块","梅花","红心","黑桃"};
	private static String pokercoder [] = { "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A", "2"};
	public static void main(String[] args) {
		ArrayList<Poker> al = new ArrayList<>();
		al.add(new Poker(count++, "大王"));
		al.add(new Poker(count++, "小王"));
		for (int i = 0; i < pokerShape.length; i++) {
			for (int j = 0; j < pokercoder.length; j++) {
				al.add(new Poker(count++, pokerShape[i]+pokercoder[j]));
			}
		}
		Collections.shuffle(al);
		TreeSet<Poker> cards = new TreeSet<>(new MyCompare());
		TreeSet<Poker> playerOne = new TreeSet<>(new MyCompare());
		TreeSet<Poker> playerTwo = new TreeSet<>(new MyCompare());
		TreeSet<Poker> playerThree = new TreeSet<>(new MyCompare());
		
		for (int i = 0; al.isEmpty(); i++) {
			if (i<13) {//playerOne
				playerOne.add(al.get(i));
			}else if (i<26) {//playerTwo
				playerTwo.add(al.get(i));
			}else if (i<39) {//playerThree
				playerThree.add(al.get(i));
			}else {//cards
				cards.add(al.get(i));
			}
		}
//		if (randomNumber()==0) {
//			playerOne.addAll(cards);
//		}else if (randomNumber()==1) {
//			playerTwo.addAll(cards);
//		}else {
//			playerThree.addAll(cards);
//		}
		
	}
	private void getPoker(TreeSet<Poker> pokes) {
		for (Iterator<Poker> iterator = pokes.iterator(); iterator.hasNext();) {
			 Poker poke = iterator.next();
	           System.out.print(poke.getName() + " ");
		}
		 System.out.println();
	}
	/**
	 * 随机数用来产出地主的
	 * @return 0――one 1――two 2――Three
	 */
	private static int randomNumber() {
		return (int)(Math.random()*3);
	}



}
